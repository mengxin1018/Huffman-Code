spring: 
  main: 
  # 允许重新定义bean
    allow-bean-definition-overriding: true
  shardingsphere:
    props:
      sql:
      # sql是否展示
        show: true
    # 数据源
    datasource: 
      names: shardings01,shardings02
      shardings01: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings01
        username: root
        password: root
      shardings02: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings02
        username: root
        password: root
    sharding: 
    # 设置分库策略
      default-database-strategy:
      # 行表达式分库策略 
        inline:
        # 分片列名称
          sharding-column: status
        # 分片算法行表达式
          algorithm-expression: shardings0$->{(status % 2)+1}
      binding-tables: t_goods
      tables: 
        t_goods: 
          actual-data-nodes: shardings0$->{1..2}.t_goods$->{0..1}
          table-strategy:
          # 行表达式分片策略 
            inline: 
            # 分片列名称
              sharding-column: goods_id
            # 分片算法行表达式
              algorithm-expression: t_goods$->{goods_id % 2}
          key-generator:
          # 自增列名称 
            column: goods_id
            type: SNOWFLAKE
            props:
              worker.id: 5
              max.tolerate.time.difference.milliseconds: 1000
        
    
